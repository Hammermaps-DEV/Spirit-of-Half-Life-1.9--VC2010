<HTML>
 <HEAD>
  <!-- $MVD$:app("RoboHELP HTML Edition by Blue Sky Software, portions by MicroVision Dev. Inc.","769") -->
  <!-- $MVD$:template("","0","0") -->
  <!-- $MVD$:fontset("Arial","Arial") -->
  <!-- $MVD$:fontset("Impact","Impact") -->
  <TITLE>Introduction to Editing</TITLE>
  <META NAME="generator" CONTENT="RoboHELP by Blue Sky Software www.blue-sky.com HTML Edition">
  <SCRIPT LANGUAGE="javascript" TITLE="BSSC Special Effects" SRC="BSSCDHTM.js">
 </SCRIPT><LINK
  REL="StyleSheet" HREF="default.css"></HEAD>
  <BODY ONLOAD="BSSCOnLoad();" ONCLICK="BSSCOnClick();" ONUNLOAD="BSSCOnUnload();">
  <H1>
   <FONT COLOR="NAVY"><FONT FACE="Impact">Introduction to Editing</FONT></FONT></H1>
  <P>
   <SPAN STYLE="font-weight : bold;">Solids: the Foundation of 3D Design</SPAN><BR>
   Blocks. Wedges. Cylinders. Spikes. They may not sound like much, but 
   these are the basic building blocks of all architecture created in 
   the Valve Hammer Editor. You can carve 'em, clip 'em, and manipulate 
   'em. You can combine these solids (also called brushes) to make any 
   shape possible, real or imagined. This is known as constructive solid 
   geometry (CSG) and this is the editing style Hammer uses.</P>
  <P>
   Once you create a brush, you'll assign to it a texture, which is a 
   pre-existing bitmap image created to make the brush resemble 
   something in the real (or some imagined) world. Examples of textures 
   include bricks, rock faces, and water.</P>
  <P>
   <SPAN STYLE="font-weight : bold;">Entities</SPAN><BR>
   You say you want more in your game world than inanimate solids? Well 
   then, what you want are entities. Where brushes are &quot;world 
   objects&quot; used to form the basic inanimate structure of your 
   level, entities are the objects that move, have sound, or are 
   interactive. An entity is anything that performs some type of 
   operation or task within your level.</P>
  <P>
   <SPAN STYLE="font-weight : bold;">Entity Types</SPAN><BR>
   There are two types of entities: point-based and brush-based.</P>
  <P>
   <SPAN STYLE="font-style : italic;">Point-based entities </SPAN>exist 
   only at a certain exact point. Examples include lights, monsters and 
   players. (Monsters <SPAN STYLE="font-weight : bold;">do</SPAN> have 
   an area, but this is defined by the game code and is not modifiable 
   from within the map.) Some point entities are just that: points. For 
   example, the env_beam entity, which controls Half-Life's beam 
   effects, uses two point entities as targets; you place the two points 
   and the beam of light runs between them.</P>
  <P>
   <SPAN STYLE="font-style : italic;">Brush-based entities </SPAN>are 
   entities that depend on a brush for their physical presence, like 
   doors, trains, and other moving objects. A trigger is another type of 
   brush-based entity; it requires that you indicate an area or 
   activation field which controls the trigger's operation.</P>
  <P>
   <SPAN STYLE="font-weight : bold;">Putting it All Together</SPAN><BR>
   Using these simple components, you can create a virtually limitless 
   variety of levels. Whether its a barren room or a vast, complex 
   world, you'll do it by using solids and textures to create your 
   architecture, then adding lights, monsters, buttons, moving platforms 
   and a host of other entities to bring your creation to life.</P>
  <P>
   Once everything is in place, you will need to compile your level. 
   This is the process that turns your collection of solids and entities 
   into a playable level that you can run in Half-Life. Although the 
   compiling process happens when you think you've finished your level, 
   knowing something about this process ahead of time can save you many headaches.</P>
  <P>
   <HR ALIGN=CENTER WIDTH="100%" SIZE="2">
   <SPAN STYLE="font-size : 10.0pt;"><A HREF="Editor_3.x_User's_Guide.htm">Return
    to the Valve Hammer Editor 3.4 User's Guide</A></SPAN>
 </BODY>
</HTML>